import data.nat.prime
import data.pnat

import data.nat.exactly_divides

open nat

namespace order

section raw_order

variables (p : ‚Ñï) (hp : p > 1)

protected def order_core : Œ† (n : ‚Ñï), n > 0 ‚Üí {r // p^r ‚à£‚à£ n}
| 0       := Œª n_pos, absurd n_pos dec_trivial
| n@(k+1) := Œª n_pos,
  have n / p < n, from div_lt_self n_pos hp,
  if h : p ‚à£ n
  then
    have p * (n / p) = n, from nat.mul_div_cancel' h,
    let ‚ü®s, hs‚ü© :=
      order_core (n / p)
        (pos_of_mul_pos_left (this.symm ‚ñ∏ n_pos : 0 < p * (n / p)) dec_trivial)
    in ‚ü®succ s, this ‚ñ∏ (exactly_divides_succ (hp.trans dec_trivial)).mp hs‚ü©
  else ‚ü®0, (exactly_divides_zero (hp.trans dec_trivial)).mp h‚ü©

def order (n : ‚Ñï) (n_pos : n > 0) : ‚Ñï := (order.order_core p hp n n_pos).val

lemma exactly_divides_order (n : ‚Ñï) (n_pos : n > 0) :
  p^(order p hp n n_pos) ‚à£‚à£ n :=
(order.order_core p hp n n_pos).property


end raw_order

/- XXX comments -/

instance : has_dvd ‚Ñï+ := ‚ü®Œª a b, a.val ‚à£ b.val‚ü©

def ùìü := {p : ‚Ñï // prime p}
notation `PP` := ùìü

def ùìü.gt_one (p : ùìü) : p.val > 1 := p.property.gt_one
def ùìü.pos (p : ùìü) : p.val > 0 := p.property.pos

instance : has_coe ùìü ‚Ñï+ := ‚ü®Œª p, ‚ü®p.val, p.pos‚ü©‚ü©

def ord (p : ùìü) (n : ‚Ñï+) : ‚Ñï := order p p.gt_one n n.property
def exactly_divides_ord {p : ùìü} {n : ‚Ñï+} : p^(ord p n) ‚à£‚à£ n :=
exactly_divides_order p p.gt_one n n.property
def exactly_divides_iff_ord {p : ùìü} {r : ‚Ñï} {n : ‚Ñï+} : ord p n = r ‚Üî p^r ‚à£‚à£ n :=
iff.intro
  (Œª e, e ‚ñ∏ exactly_divides_ord)
  (exactly_divides_unique exactly_divides_ord)

variable {p : ùìü}

-- Recursion (though we prove them in a round-about fashion)

lemma ord_not_div {n : ‚Ñï+} : ¬¨(‚Üëp ‚à£ n) ‚Üî ord p n = 0 :=
(exactly_divides_zero p.pos).trans exactly_divides_iff_ord.symm

lemma ord_div {n : ‚Ñï+} : ord p (p * n) = succ (ord p n) :=
exactly_divides_iff_ord.mpr
((exactly_divides_succ p.pos).mp exactly_divides_ord)

-- Multiplicative

lemma ord_one : ord p 1 = 0 :=
exactly_divides_iff_ord.mpr (exactly_divides_one p.property)

lemma ord_mul (a b : ‚Ñï+) : ord p (a * b) = ord p a + ord p b :=
exactly_divides_iff_ord.mpr
(exactly_divides_mul p.property
  exactly_divides_ord exactly_divides_ord)

lemma ord_ppow {k : ‚Ñï} {a : ‚Ñï+} : ord p (pnat.pow a k) = k * ord p a :=
exactly_divides_iff_ord.mpr
(exactly_divides_pow p.property exactly_divides_ord)

lemma ord_pow {k : ‚Ñï} {a : ‚Ñï+} : ord p (a^k) = k * ord p a :=
have pnat.pow a k = a^k, from (pnat.coe_nat_coe _).symm, this ‚ñ∏ ord_ppow

-- Gcd

def pgcd (a b : ‚Ñï+) : ‚Ñï+ := ‚ü®gcd a b, gcd_pos_of_pos_left b a.pos‚ü©

lemma ord_pgcd {a b : ‚Ñï+} : ord p (pgcd a b) = min (ord p a) (ord p b) :=
exactly_divides_iff_ord.mpr
(exactly_divides_gcd
  exactly_divides_ord exactly_divides_ord)

lemma ord_gcd {a b : ‚Ñï+} : ord p (gcd a b) = min (ord p a) (ord p b) :=
have pgcd a b = gcd a b, from (pnat.coe_nat_coe _).symm, this ‚ñ∏ ord_pgcd

end order
